# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the main branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke

# This workflow also requires a key for a service account that has permissions to google storage. Must be saved under GKE_STORAGE_SA_KEY
# The service account must have the following roles:
# roles/storage.admin
# How to apply roles see:
# https://cloud.google.com/iam/docs/creating-managing-service-accounts#iam-service-accounts-list-gcloud 

name: Build and Deploy to GKE

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_NAME }}
  GKE_ZONE: ${{ secrets.GKE_CLUSTER_ZONE }}
  DEPLOYMENT_NAME: minizinc-app # TODO: update to deployment name
  IMAGE: minizinc

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker
          
      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@v0.2.1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      # Create service account key file
      - name: Create Service Account key file
        run: |-
          echo "$SA_KEY" | base64 --decode >> ./src/key.json
        env:
          SA_KEY: ${{ secrets.GKE_STORAGE_SA_KEY }}
      
      # Create env file for bucket name.
      - name: Create .env file
        run: |-
          echo "BUCKET_NAME=$BUCKET_NAME" >> ./src/.env
        env:
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            ./
      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sL https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64 --output k
          chmod u+x ./k

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          (cd ./kustomize/base && ../../k edit set image minizinc=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA)
          sed -i "s/\[PROJECT_ID\]/${PROJECT_ID}/g" ./kustomize/base/storage-account.yaml
          ./k build ./kustomize/overlays/dev | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
